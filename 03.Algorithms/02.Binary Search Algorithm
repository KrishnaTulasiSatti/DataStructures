// Online C compiler to run C program online
#include <stdio.h>

int main() {
    int n;
    scanf("%d",&n);
    int arr[n];
    //Binary Search Algorithm--> ***Array should be sorted
    for(int i = 0 ; i < n ; i++) {
        scanf("%d",&arr[i]);
    }
    int data;
    scanf("%d",&data);
    
    /* You have to divide the array into two halves 
    int l = 0 and r = n-1 --> mid=(l+r)/2
    and cmp the value with the element at mid place...arr[mid]
    As the array is sorted if the value is greater than the arr[mid] 
    then for sure our req element is present in second half
    if it is less than arr[mid] then it is present in first half
    --->Possible cases
    Case-1 : data == arr[mid]  return mid;
    Case-2 : data > arr[mid]   add 1 to mid and store it in l;
    Case-3 : data < arr[mid]   sub 1 to mid and store it in r;
    
    Example : 5 9 17 23 25 45 59 63 71 89
    data = 59
    0 1  2  3  4  5  6  7 8  9          l   r   mid
    5 9 17 23 25 45 59 63 71 89     
    l         m              r          0   9    4
    59 > arr[mid](25) S0 l = mid+1      5   9    7
    
    0 1  2  3  4  5  6  7 8  9     
    5 9 17 23 25 45 59 63 71 89 
                  l    m     r
    59 < arr[mid](63) So r = mid-1      5   6   5  
    
    0 1  2  3  4  5  6  7 8  9     
    5 9 17 23 25 45 59 63 71 89 
                  lm  r
    59 > arr[mid](45) So l=mid+1        6   6   6  
    
    0 1  2  3  4  5  6  7 8  9     
    5 9 17 23 25 45 59 63 71 89 
                    lmr
    59 == arr[mid](59) So return index(mid)
    
    Let us consider if the given data is not present in array???
    
    data = 60
     if(l > r) then data isn't present in the array...
     */
     int l = 0 ;
     int r = n-1;
     int mid = (l+r)/2;
     int flag = 0;
     while(l < r){
     mid = (l+r)/2;
     if(data == arr[mid]) {
         flag = 1;
         printf("%d",mid);
         break;
     }
     else if(data > arr[mid]) l = mid+1;
     else r = mid-1;
     }
     if(flag == 0) printf("-1");
    return 0;
}
